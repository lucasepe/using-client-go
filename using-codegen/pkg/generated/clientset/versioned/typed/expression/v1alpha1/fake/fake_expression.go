/*
Copyright (c) 2022 <copyright holders>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/lucasepe/using-client-go/using-codegen/pkg/apis/expression/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeExpressions implements ExpressionInterface
type FakeExpressions struct {
	Fake *FakeExampleV1alpha1
	ns   string
}

var expressionsResource = schema.GroupVersionResource{Group: "example.org", Version: "v1alpha1", Resource: "expressions"}

var expressionsKind = schema.GroupVersionKind{Group: "example.org", Version: "v1alpha1", Kind: "Expression"}

// Get takes name of the expression, and returns the corresponding expression object, and an error if there is any.
func (c *FakeExpressions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Expression, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(expressionsResource, c.ns, name), &v1alpha1.Expression{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Expression), err
}

// List takes label and field selectors, and returns the list of Expressions that match those selectors.
func (c *FakeExpressions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ExpressionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(expressionsResource, expressionsKind, c.ns, opts), &v1alpha1.ExpressionList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ExpressionList{ListMeta: obj.(*v1alpha1.ExpressionList).ListMeta}
	for _, item := range obj.(*v1alpha1.ExpressionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested expressions.
func (c *FakeExpressions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(expressionsResource, c.ns, opts))

}

// Create takes the representation of a expression and creates it.  Returns the server's representation of the expression, and an error, if there is any.
func (c *FakeExpressions) Create(ctx context.Context, expression *v1alpha1.Expression, opts v1.CreateOptions) (result *v1alpha1.Expression, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(expressionsResource, c.ns, expression), &v1alpha1.Expression{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Expression), err
}

// Update takes the representation of a expression and updates it. Returns the server's representation of the expression, and an error, if there is any.
func (c *FakeExpressions) Update(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (result *v1alpha1.Expression, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(expressionsResource, c.ns, expression), &v1alpha1.Expression{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Expression), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeExpressions) UpdateStatus(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (*v1alpha1.Expression, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(expressionsResource, "status", c.ns, expression), &v1alpha1.Expression{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Expression), err
}

// Delete takes name of the expression and deletes it. Returns an error if one occurs.
func (c *FakeExpressions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(expressionsResource, c.ns, name, opts), &v1alpha1.Expression{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeExpressions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(expressionsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ExpressionList{})
	return err
}

// Patch applies the patch and returns the patched expression.
func (c *FakeExpressions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Expression, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(expressionsResource, c.ns, name, pt, data, subresources...), &v1alpha1.Expression{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.Expression), err
}
