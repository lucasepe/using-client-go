/*
Copyright (c) 2022 <copyright holders>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/lucasepe/using-client-go/using-codegen/pkg/apis/expression/v1alpha1"
	scheme "github.com/lucasepe/using-client-go/using-codegen/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ExpressionsGetter has a method to return a ExpressionInterface.
// A group's client should implement this interface.
type ExpressionsGetter interface {
	Expressions(namespace string) ExpressionInterface
}

// ExpressionInterface has methods to work with Expression resources.
type ExpressionInterface interface {
	Create(ctx context.Context, expression *v1alpha1.Expression, opts v1.CreateOptions) (*v1alpha1.Expression, error)
	Update(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (*v1alpha1.Expression, error)
	UpdateStatus(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (*v1alpha1.Expression, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.Expression, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ExpressionList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Expression, err error)
	ExpressionExpansion
}

// expressions implements ExpressionInterface
type expressions struct {
	client rest.Interface
	ns     string
}

// newExpressions returns a Expressions
func newExpressions(c *ExampleV1alpha1Client, namespace string) *expressions {
	return &expressions{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the expression, and returns the corresponding expression object, and an error if there is any.
func (c *expressions) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Expression, err error) {
	result = &v1alpha1.Expression{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("expressions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Expressions that match those selectors.
func (c *expressions) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ExpressionList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ExpressionList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("expressions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested expressions.
func (c *expressions) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("expressions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a expression and creates it.  Returns the server's representation of the expression, and an error, if there is any.
func (c *expressions) Create(ctx context.Context, expression *v1alpha1.Expression, opts v1.CreateOptions) (result *v1alpha1.Expression, err error) {
	result = &v1alpha1.Expression{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("expressions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(expression).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a expression and updates it. Returns the server's representation of the expression, and an error, if there is any.
func (c *expressions) Update(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (result *v1alpha1.Expression, err error) {
	result = &v1alpha1.Expression{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("expressions").
		Name(expression.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(expression).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *expressions) UpdateStatus(ctx context.Context, expression *v1alpha1.Expression, opts v1.UpdateOptions) (result *v1alpha1.Expression, err error) {
	result = &v1alpha1.Expression{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("expressions").
		Name(expression.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(expression).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the expression and deletes it. Returns an error if one occurs.
func (c *expressions) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("expressions").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *expressions) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("expressions").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched expression.
func (c *expressions) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Expression, err error) {
	result = &v1alpha1.Expression{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("expressions").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
